*Select GIS sales by account and zipcode for the dates we would like.
GET DATA 
  /TYPE=ODBC 
  /CONNECT='DSN=Teradata;DB=PRD_DWH_VIEW;PORT=1025;DBCNL=10.4.165.29;UID=spss;PWD=$-<~*x#N3@!/-!!+'
  /SQL='SELECT CU.CUSTOMER, CU.ZZIPCD5 ZIPCODE, SI.ZORD_DATE ORD_DATE, COUNT(DISTINCT SI.S_ORD_NUM) ORDERS, SUM(SI.SUBTOTAL_2) SALES ' +
           'FROM PRD_DWH_VIEW.Customer_V CU ' +
           'LEFT JOIN PRD_DWH_VIEW.Sales_Invoice_V SI '+
               'ON CU.CUSTOMER = SI.SOLD_TO '+
           'WHERE CU.ZZIPCD5 <> '''' AND ' +
                         'CU.ACCNT_GRP = ''0001'' AND ' +                                  
                         'SI.ZZCOMFLG = ''Y'' AND ' +
                         '(SI.ZORD_DATE BETWEEN {d ''2016-07-18''} AND {d ''2016-09-04''} ) AND '+
                         'SI.SOLD_TO <> ''0222222226'' ' +
            'GROUP BY 1, 2, 3 '.
CACHE.
EXE.

DATASET NAME SLS_BY_DATE.
DATASET ACTIVATE SLS_BY_DATE.

SORT CASES BY CUSTOMER(A) ZIPCODE(A) ORD_DATE(A).

*Get activity for the accommodation account.
GET DATA 
  /TYPE=ODBC 
  /CONNECT='DSN=Teradata;DB=PRD_DWH_VIEW;PORT=1025;DBCNL=10.4.165.29;UID=spss;PWD=$-<~*x#N3@!/-!!+'
  /SQL='SELECT SI.SOLD_TO, SI.ZSHIPZIP, SI.ZORD_DATE ORD_DATE, COUNT(DISTINCT SI.S_ORD_NUM) ORDERS, SUM(SI.SUBTOTAL_2) SALES ' +
           'FROM PRD_DWH_VIEW.Sales_Invoice_V SI '+
           'WHERE SI.ZSHIPZIP <> '''' AND ' +                              
                         'SI.ZZCOMFLG = ''Y'' AND ' +
                         '(SI.ZORD_DATE BETWEEN {d ''2016-07-18''} AND {d ''2016-09-04''} ) AND '+
                         'SI.SOLD_TO = ''0222222226'' ' +
            'GROUP BY 1, 2, 3 '.
CACHE.
EXE.

DATASET NAME GUEST_BY_DATE.
DATASET ACTIVATE GUEST_BY_DATE.

STRING ZIPCODE(A5).
COMPUTE ZIPCODE=SUBSTR(ZSHIPZIP,1,5).
EXE.

DELETE VARIABLES ZSHIPZIP.

RENAME VARIABLES SOLD_TO = CUSTOMER.

DATASET ACTIVATE SLS_BY_DATE.

ADD FILES
   /FILE = *
   /FILE = 'GUEST_BY_DATE'.
EXE.

RENAME VARIABLES CUSTOMER = account.

ALTER TYPE account(F10.0).

*Compute a variable to show the week of the test in which the order was placed.
COMPUTE ORD_WEEK = 0.
FORMATS ORD_WEEK(F1.0).

IF(ORD_DATE >= DATE.MDY(7,18,2016) AND ORD_DATE <= DATE.MDY(7,24,2016) ) ORD_WEEK = 1.
IF(ORD_DATE >= DATE.MDY(7,25,2016) AND ORD_DATE <= DATE.MDY(7,31,2016) ) ORD_WEEK = 2.
IF(ORD_DATE >= DATE.MDY(8,1,2016) AND ORD_DATE <= DATE.MDY(8,7,2016) ) ORD_WEEK = 3.
IF(ORD_DATE >= DATE.MDY(8,8,2016) AND ORD_DATE <= DATE.MDY(8,14,2016) ) ORD_WEEK = 4.
IF(ORD_DATE >= DATE.MDY(8,15,2016) AND ORD_DATE <= DATE.MDY(8,21,2016) ) ORD_WEEK = 5.
IF(ORD_DATE >= DATE.MDY(8,22,2016) AND ORD_DATE <= DATE.MDY(8,28,2016) ) ORD_WEEK = 6.
IF(ORD_DATE >= DATE.MDY(8,29,2016) AND ORD_DATE <= DATE.MDY(9,4,2016) ) ORD_WEEK = 7.
VALUE LABELS ORD_WEEK 0 'No Order' 1 'CP Week 1' 2 'CP Week 2' 3 'CP Week 3' 4 'CP Week 4' 5 'Test Week 1' 6 'Test Week 2' 7 'Test Week 3'.
FORMATS ORD_WEEK(F2.0).
EXE.

DATASET DECLARE SLS_BY_WK.

AGGREGATE
   /OUTFILE = 'SLS_BY_WK'
   /BREAK = account ZIPCODE ORD_WEEK
   /ORDERS = SUM(ORDERS)
   /SALES = SUM(SALES).

DATASET ACTIVATE SLS_BY_WK.

*Create a dataset for all accounts and one for each week of the test.
DATASET COPY CP1.
DATASET COPY CP2.
DATASET COPY CP3.
DATASET COPY CP4.
DATASET COPY WK1.
DATASET COPY WK2.
DATASET COPY WK3.

DATASET DECLARE  SLS_BY_AZ.

AGGREGATE
   /OUTFILE = 'SLS_BY_AZ'
   /BREAK = account ZIPCODE
   /Rec_Count = N.

/*Cleansing Period Week 1*/.
DATASET ACTIVATE CP1.

SELECT IF(ORD_WEEK = 1).
EXE.

RENAME VARIABLES ORDERS = CP1_ORDERS SALES = CP1_SALES.

DELETE VARIABLES ORD_WEEK.

/*Cleansing Period Week 2*/.
DATASET ACTIVATE CP2.

SELECT IF(ORD_WEEK = 2).
EXE.

RENAME VARIABLES ORDERS = CP2_ORDERS SALES = CP2_SALES.

DELETE VARIABLES ORD_WEEK.

/*Cleansing Period Week 3*/.
DATASET ACTIVATE CP3.

SELECT IF(ORD_WEEK = 3).
EXE.

RENAME VARIABLES ORDERS = CP3_ORDERS SALES = CP3_SALES.

DELETE VARIABLES ORD_WEEK.

/*Cleansing Period Week 4*/.
DATASET ACTIVATE CP4.

SELECT IF(ORD_WEEK = 4).
EXE.

RENAME VARIABLES ORDERS = CP4_ORDERS SALES = CP4_SALES.

DELETE VARIABLES ORD_WEEK.

/*Testing Period Week 1*/.
DATASET ACTIVATE WK1.

SELECT IF(ORD_WEEK = 5).
EXE.

RENAME VARIABLES ORDERS = WK1_ORDERS SALES = WK1_SALES.

DELETE VARIABLES ORD_WEEK.

/*Testing Period Week 2*/.
DATASET ACTIVATE WK2.

SELECT IF(ORD_WEEK = 6).
EXE.

RENAME VARIABLES ORDERS = WK2_ORDERS SALES = WK2_SALES.

DELETE VARIABLES ORD_WEEK.

/*Testing Period Week 3*/.
DATASET ACTIVATE WK3.

SELECT IF(ORD_WEEK = 7).
EXE.

RENAME VARIABLES ORDERS = WK3_ORDERS SALES = WK3_SALES.

DELETE VARIABLES ORD_WEEK.

DATASET ACTIVATE SLS_BY_AZ.

DELETE VARIABLES Rec_Count.

MATCH FILES
   /FILE = *
   /TABLE = 'CP1'
   /TABLE = 'CP2'
   /TABLE = 'CP3'
   /TABLE = 'CP4'
   /TABLE = 'WK1'
   /TABLE = 'WK2'
   /TABLE = 'WK3'
   /BY account ZIPCODE.
EXE.

DATASET CLOSE SLS_BY_WK.
DATASET CLOSE CP1.
DATASET CLOSE CP2.
DATASET CLOSE CP3.
DATASET CLOSE CP4.
DATASET CLOSE WK1.
DATASET CLOSE WK2.
DATASET CLOSE WK3.

*Get Gcom Sales.
GET DATA 
  /TYPE=ODBC 
  /CONNECT='DSN=Teradata;DB=PRD_DWH_VIEW;PORT=1025;DBCNL=10.4.165.29;UID=spss;PWD=$-<~*x#N3@!/-!!+'
  /SQL='SELECT CU.CUSTOMER, CU.ZZIPCD5 ZIPCODE, SI.ZORD_DATE ORD_DATE, COUNT(DISTINCT SI.S_ORD_NUM) ORDERS, SUM(SI.SUBTOTAL_2) SALES ' +
           'FROM PRD_DWH_VIEW.Customer_V CU ' +
           'LEFT JOIN PRD_DWH_VIEW.Sales_Invoice_V SI '+
               'ON CU.CUSTOMER = SI.SOLD_TO '+
           'WHERE CU.ZZIPCD5 <> '''' AND ' +
                         'CU.ACCNT_GRP = ''0001'' AND ' +                                  
                         'SI.ZZCOMFLG = ''Y'' AND ' +
                         '(SI.ZORD_DATE BETWEEN {d ''2016-07-18''} AND {d ''2016-09-04''} ) AND '+
                         'SI.SOLD_TO <> ''0222222226'' AND ' +
                         'SI.SALES_OFF = ''E01'' ' +
            'GROUP BY 1, 2, 3 '.
CACHE.
EXE.

DATASET NAME GCS_BY_DATE.
DATASET ACTIVATE GCS_BY_DATE.

ADD FILES
   /FILE = *
   /FILE = GUEST_BY_DATE.
EXE.

DATASET CLOSE GUEST_BY_DATE.
DATASET ACTIVATE GCS_BY_DATE.

RENAME VARIABLES CUSTOMER = account.

ALTER TYPE account(F10.0).

SORT CASES BY account(A) ZIPCODE(A) ORD_DATE(A).

*Compute a variable to show the week of the test in which the order was placed.
COMPUTE ORD_WEEK = 0.
FORMATS ORD_WEEK(F1.0).

IF(ORD_DATE >= DATE.MDY(7,18,2016) AND ORD_DATE <= DATE.MDY(7,24,2016) ) ORD_WEEK = 1.
IF(ORD_DATE >= DATE.MDY(7,25,2016) AND ORD_DATE <= DATE.MDY(7,31,2016) ) ORD_WEEK = 2.
IF(ORD_DATE >= DATE.MDY(8,1,2016) AND ORD_DATE <= DATE.MDY(8,7,2016) ) ORD_WEEK = 3.
IF(ORD_DATE >= DATE.MDY(8,8,2016) AND ORD_DATE <= DATE.MDY(8,14,2016) ) ORD_WEEK = 4.
IF(ORD_DATE >= DATE.MDY(8,15,2016) AND ORD_DATE <= DATE.MDY(8,21,2016) ) ORD_WEEK = 5.
IF(ORD_DATE >= DATE.MDY(8,22,2016) AND ORD_DATE <= DATE.MDY(8,28,2016) ) ORD_WEEK = 6.
IF(ORD_DATE >= DATE.MDY(8,29,2016) AND ORD_DATE <= DATE.MDY(9,4,2016) ) ORD_WEEK = 7.
VALUE LABELS ORD_WEEK 0 'No Order' 1 'CP Week 1' 2 'CP Week 2' 3 'CP Week 3' 4 'CP Week 4' 5 'Test Week 1' 6 'Test Week 2' 7 'Test Week 3'.
FORMATS ORD_WEEK(F2.0).
EXE.

DATASET DECLARE GCS_BY_WK.

AGGREGATE
   /OUTFILE = 'GCS_BY_WK'
   /BREAK = account ZIPCODE ORD_WEEK
   /ORDERS = SUM(ORDERS)
   /SALES = SUM(SALES).

DATASET ACTIVATE GCS_BY_WK.

*Create a dataset for all accounts and one for each week of the test.
DATASET COPY CP1.
DATASET COPY CP2.
DATASET COPY CP3.
DATASET COPY CP4.
DATASET COPY WK1.
DATASET COPY WK2.
DATASET COPY WK3.

/*Cleansing Period Week 1*/.
DATASET ACTIVATE CP1.

SELECT IF(ORD_WEEK = 1).
EXE.

RENAME VARIABLES ORDERS = GC_CP1_ORDERS SALES = GC_CP1_SALES.

DELETE VARIABLES ORD_WEEK.

/*Cleansing Period Week 2*/.
DATASET ACTIVATE CP2.

SELECT IF(ORD_WEEK = 2).
EXE.

RENAME VARIABLES ORDERS = GC_CP2_ORDERS SALES = GC_CP2_SALES.

DELETE VARIABLES ORD_WEEK.

/*Cleansing Period Week 3*/.
DATASET ACTIVATE CP3.

SELECT IF(ORD_WEEK = 3).
EXE.

RENAME VARIABLES ORDERS = GC_CP3_ORDERS SALES = GC_CP3_SALES.

DELETE VARIABLES ORD_WEEK.

/*Cleansing Period Week 4*/.
DATASET ACTIVATE CP4.

SELECT IF(ORD_WEEK = 4).
EXE.

RENAME VARIABLES ORDERS = GC_CP4_ORDERS SALES = GC_CP4_SALES.

DELETE VARIABLES ORD_WEEK.

/*Testing Period Week 1*/.
DATASET ACTIVATE WK1.

SELECT IF(ORD_WEEK = 5).
EXE.

RENAME VARIABLES ORDERS = GC_WK1_ORDERS SALES = GC_WK1_SALES.

DELETE VARIABLES ORD_WEEK.

/*Testing Period Week 2*/.
DATASET ACTIVATE WK2.

SELECT IF(ORD_WEEK = 6).
EXE.

RENAME VARIABLES ORDERS = GC_WK2_ORDERS SALES = GC_WK2_SALES.

DELETE VARIABLES ORD_WEEK.

/*Testing Period Week 3*/.
DATASET ACTIVATE WK3.

SELECT IF(ORD_WEEK = 7).
EXE.

RENAME VARIABLES ORDERS = GC_WK3_ORDERS SALES = GC_WK3_SALES.

DELETE VARIABLES ORD_WEEK.

DATASET ACTIVATE SLS_BY_AZ.

MATCH FILES
   /FILE = *
   /TABLE = 'CP1'
   /TABLE = 'CP2'
   /TABLE = 'CP3'
   /TABLE = 'CP4'
   /TABLE = 'WK1'
   /TABLE = 'WK2'
   /TABLE = 'WK3'
   /BY account ZIPCODE.
EXE.

DATASET CLOSE GCS_BY_WK.
DATASET CLOSE CP1.
DATASET CLOSE CP2.
DATASET CLOSE CP3.
DATASET CLOSE CP4.
DATASET CLOSE WK1.
DATASET CLOSE WK2.
DATASET CLOSE WK3.

DATASET ACTIVATE SLS_BY_AZ.

*Recode missing values to 0.
VECTOR ACT = CP1_ORDERS TO GC_WK3_SALES.

LOOP #i = 1 TO 28.

   IF(MISSING(ACT(#i))) ACT(#i) = 0.

END LOOP.
EXE.

SORT CASES BY ZIPCODE(A).

*Open the file containing the Zipcode to DMA mapping.
GET FILE = '/usr/spss/userdata/LWhately/Media/2015 Media Test/dma_zip_xref_mine.sav'
   /KEEP Zipcode DMA.
CACHE.
EXE.

DATASET NAME ZTD.
DATASET ACTIVATE ZTD.

COMPUTE Group = 0.
IF(ANY(DMA,'BEAUMONT - PORT ARTHUR','BINGHAMTON','BOISE','CHICO - REDDING','GRAND JUNCTION - MONTROSE','MEDFORD - KLAMATH FALLS',
                    'MONROE - EL DORADO','RENO','ROCHESTR - MASON CITY - AUSTIN','TERRE HAUTE')) Group = 1.
IF(ANY(DMA, 'ALBANY, GA','AMARILLO','CASPER - RIVERTON','JONESBORO','LUBBOCK','SANTABARBRA - SANMAR - SANLUOB','TALLAHASSEE - THOMASVILLE',
                     'TOPEKA','TRAVERSE CITY - CADILLAC','WILMINGTON')) Group = 2.
FORMATS Group(F1.0).
VALUE LABELS Group 1 'Test' 2 'Control'.
EXE.

SORT CASES BY ZIPCODE(A).

DATASET ACTIVATE SLS_BY_AZ.

MATCH FILES
   /FILE = *
   /TABLE = 'ZTD'
   /BY ZIPCODE.
EXE.

DATASET CLOSE ZTD.
DATASET ACTIVATE SLS_BY_AZ.

*Filter out any accounts which were identified as having high avg monthly orders or unstable order history.
GET FILE = '/usr/spss/userdata/Albrecht/Display Geo/Five Year Orders through June16 by Account from TD.sav'
   /KEEP account ZIPCODE Order_Outlier Stable_Order_Outlier.
CACHE.
EXE.

DATASET NAME ORD_OUT.

DATASET ACTIVATE SLS_BY_AZ.

SORT CASES BY account(A) ZIPCODE(A).

MATCH FILES
   /FILE = *
   /TABLE = 'ORD_OUT'
   /BY account ZIPCODE.
EXE.

DATASET CLOSE ORD_OUT.
DATASET ACTIVATE SLS_BY_AZ.

RECODE Group(MISSING = 0) /Order_Outlier(MISSING = 0) /Stable_Order_Outlier(MISSING = 0).

COMPUTE Include_Orders = (Order_Outlier = 0 AND Stable_Order_Outlier = 0).
FORMATS Include_Orders(F1.0).
EXE.

*Save the resulting file.
SAVE OUTFILE = '/usr/spss/userdata/Albrecht/Display Geo/Weekly Updates/Week 3/GIS and Gcom Weekly Sales by Account.sav'.

SELECT IF(Group > 0).
EXE.

FILTER BY Include_Orders.

MEANS CP1_ORDERS CP2_ORDERS CP3_ORDERS CP4_ORDERS WK1_ORDERS WK2_ORDERS WK3_ORDERS
            GC_CP1_ORDERS GC_CP2_ORDERS GC_CP3_ORDERS GC_CP4_ORDERS GC_WK1_ORDERS GC_WK2_ORDERS GC_WK3_ORDERS
            BY Group /CELLS SUM.
